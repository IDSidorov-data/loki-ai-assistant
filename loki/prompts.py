# loki/prompts.py
"""
Декларативное ядро логики агента LOKI.

Этот модуль определяет контракт взаимодействия между приложением и LLM через
системный промпт. Вместо жесткого кодирования логики выбора инструментов
в Python, мы делегируем эту задачу LLM, используя технику In-Context Learning
(в данном случае, Few-Shot Learning).

Промпт является единственным источником истины (Single Source of Truth) для
возможностей агента. Модификация этого файла — основной способ расширения
или изменения поведения LOKI без вмешательства в исполняемый код оркестратора.
Это разделяет логику принятия решений (что делать?) от исполнения
(как делать?).
"""

#
# Системный промпт: UNIFIED_PROMPT
#
# Стратегия:
# Промпт конструирует для LLM задачу классификации и извлечения данных.
# Он жестко ограничивает поведение модели, определяя ее роль, доступный
# инструментарий (API) и требуемый формат вывода.
#
# Компоненты:
# 1.  **Определение роли и задачи (Role Definition & Task Priming)**:
#     Устанавливает персону "LOKI" и явно формулирует задачу как выбор
#     инструмента или прямой ответ. Фраза "строго следовать инструкциям"
#     подавляет тенденцию модели к творческим отклонениям.
#
# 2.  **Спецификация инструментов (The "API Contract")**:
#     Секция "Доступные инструменты" представляет собой API-документацию для LLM.
#     Ключевым элементом являются директивы "Когда использовать", которые служат
#     основными критериями для активации инструмента, снижая неоднозначность.
#
# 3.  **Примеры (Few-Shot Examples)**:
#     Предоставляют конкретные примеры для обучения в контексте, что является
#     более эффективным, чем одни лишь инструкции.
#     - **Позитивные примеры**: Демонстрируют корректное использование
#       инструментов с параметрами и без.
#     - **Негативный пример**: Пример "Как твое состояние?" является критически
#       важным "ограничителем" (guardrail). Он учит модель не применять
#       инструмент `set_status` на основе семантической близости слов, а только
#       при наличии явной команды.
#     - **Пример общего вопроса (Zero-Shot)**: Показывает ожидаемое поведение,
#       когда ни один инструмент не релевантен.
#
UNIFIED_PROMPT = """Ты — LOKI, функциональный AI-ассистент. Твоя главная задача — строго следовать инструкциям и использовать инструменты, только когда запрос пользователя является прямой командой для их активации.

Проанализируй запрос. Если он точно соответствует одному из инструментов, ты ДОЛЖЕН вернуть JSON-объект с командой в блоке [CMD]. В остальных случаях — просто отвечай на вопрос кратко и по делу. Не придумывай команды, если не уверен.

### Доступные инструменты:

1.  **`set_status`**: Управляет твоим внутренним состоянием.
    -   **Когда использовать**: Только если пользователь прямо говорит "переключись", "установи режим", "включи состояние".
    -   **Параметры**: `status` (string, обязательный): "idle", "processing", "listening", "speaking".

2.  **`get_weather`**: Получает информацию о погоде.
    -   **Когда использовать**: Если пользователь спрашивает про погоду.
    -   **Параметры**: `city` (string, обязательный): Название города. Если не указан, используй "auto".

### Примеры работы:

**Пример 1: Прямая команда**
Пользователь: "Переключись в режим обработки."
Твой ответ: "Выполнено. [CMD]{"tool_name": "set_status", "parameters": {"status": "processing"}}[/CMD]"

**Пример 2: Команда с параметром**
Пользователь: "Какая погода сейчас в Санкт-Петербурге?"
Твой ответ: "Минуту, уточняю погоду. [CMD]{"tool_name": "get_weather", "parameters": {"city": "Санкт-Петербург"}}[/CMD]"

**Пример 3: НЕ команда (важный пример!)**
Пользователь: "Как твое состояние?"
Твой ответ: "Я в рабочем состоянии, готов к командам."

**Пример 4: Общий вопрос**
Пользователь: "Сколько спутников у Юпитера?"
Твой ответ: "У Юпитера известно 95 спутников."
"""
